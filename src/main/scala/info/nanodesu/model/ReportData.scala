package info.nanodesu.model

import net.liftweb.json.Extraction
import net.liftweb.json.JsonAST.JValue
import net.liftweb.util.Helpers
import net.liftweb.common.Box
import java.sql.Connection
import java.util.Date
import net.liftweb.common.Empty
import java.util.concurrent.ConcurrentHashMap
import net.liftweb.common.Full
import net.liftweb.common.Loggable
import scala.math.BigDecimal
import _root_.scala.language.implicitConversions
import org.apache.commons.lang.StringUtils
import info.nanodesu.model.db.updaters.reporting.QueryMinReportVersion
import info.nanodesu.lib.db.CookieBox
import info.nanodesu.model.db.collectors.gameinfo.loader.GameIdFromLinkLoader

// Definition of the data that is reported by PA to the webservice

case class ReportData(
  ident: String, // unique lobbyId generated by PA
  reporterUberName: String,
  reporterDisplayName: String,
  reporterTeam: Int,
  observedTeams: List[ReportTeam],
  showLive: Boolean,
  firstStats: StatsReportData,
  version: Int,
  planet: ReportedPlanet,
  paVersion: String)

case class ReportTeam(
  index: Int,
  primaryColor: String,
  secondaryColor: String,
  players: List[ReportPlayer])

case class ReportPlayer(displayName: String)
  
case class ReportedPlanet(
  seed: Int,
  temperature: String,
  water_height: String,
  height_range: String,
  radius: String,
  biome: String,
  planet_name: String)

case class RunningGameData(
  gameLink: Int,
  stats: StatsReportData)

case class StatsReportData(
  armyCount: Int,
  metalIncome: Int,
  energyIncome: Int,
  metalSpending: Int,
  energySpending: Int,
  metalIncomeNet: Int,
  energyIncomeNet: Int,
  metalStored: Int,
  energyStored: Int,
  metalProducedSinceLastTick: Int,
  energyProducedSinceLastTick: Int,
  metalWastedSinceLastTick: Int,
  energyWastedSinceLastTick: Int,
  apm: Int)

// can't have the usual companion name because overloading apply would result in problems in the tests 
object RunningGameDataC {
  private implicit val formats = net.liftweb.json.DefaultFormats
  implicit def toJson(report: ReportData): JValue = Extraction.decompose(report)
  def apply(in: JValue): Box[RunningGameData] = Helpers.tryo(in.extract[RunningGameData])
  def unapply(in: JValue): Option[RunningGameData] = apply(in)
}

object ReportDataC extends QueryMinReportVersion with GameIdFromLinkLoader {
  private implicit val formats = net.liftweb.json.DefaultFormats
  implicit def toJson(report: ReportData): JValue = Extraction.decompose(report)

  def apply(in: JValue): Box[ReportData] = Helpers.tryo(in.extract[ReportData])
  def unapply(in: JValue): Option[ReportData] = apply(in)
  
  def selectReportVersion = CookieBox withSession (queryMinReportVersion(_)) 
  
  def isVersionSupported(version: Int) = selectReportVersion <= version
  
  def getGameIdForLink(link: Int) = {
    CookieBox withSession (selectGameIdFromLink(_, link))
  }
}